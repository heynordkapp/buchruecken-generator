main();var myRowGutter;function main(){var myDocument;    if(app.documents.length > 0){        myDocument = app.activeDocument;        }else{        myDocument = app.documents.add();         }//Musterseite erstellen und dritte Seite hinzufügenvar myBookMaster = myDocument.masterSpreads.add ();myBookMaster.pages.add();     //Buchrücken auf Musterseite erstellensetWidthHeight(myBookMaster.pages.item(1), myDisplayDialog(), myDocument.documentPreferences.properties.pageHeight + documentUnits ());//Dokumentseitenanordnung zulassenmyDocument.documentPreferences.allowPageShuffle = false;myDocument.documentPreferences.preserveLayoutWhenShuffling = true;//Umschlag erstellenvar mySpread = myDocument.spreads.add(LocationOptions.BEFORE,myDocument.spreads[0],{appliedMaster:myBookMaster});mySpread.allowPageShuffle = false;mySpread.pages.add();//Umschlag sinnvoll paginierenmyUmschlag = myDocument.sections.add(myDocument.pages[0],{sectionPrefix:"U"});myRuecken = myDocument.sections.add(myDocument.pages[1],{continueNumbering:false, pageNumberStart:1, sectionPrefix:"R"});myUmschlag2 = myDocument.sections.add(myDocument.pages[2],{continueNumbering:false, pageNumberStart:2, sectionPrefix:"U"});//Hat die Startseite schon einen Sektionsanfang?var neuDo = false;	for(var myCounter = 0; myCounter < myDocument.sections.length; myCounter ++){		if(myDocument.sections[myCounter].pageStart.id == myDocument.pages[3].id){            var neuDo = true;            };	}//Wenn nicht, Sektionsanfang auf Startseite mit Seitenzahl 1if(neuDo == true){}else {myDocument.sections.add(myDocument.pages[3],{continueNumbering:false, pageNumberStart:1, sectionPrefix:""});};}//ui dialogfunction myDisplayDialog(){	var myLabelWidth = 90;	var myDialog = app.dialogs.add({name:"Buchrücken einstellen"});	with(myDialog.dialogColumns.add()){				with(dialogRows.add()){			with(dialogColumns.add()){				staticTexts.add({staticLabel:"Buchstärke:", minWidth:myLabelWidth});			}			with(dialogColumns.add()){				var myRowGutterField = measurementEditboxes.add({editValue:12, editUnits:app.documents[0].viewPreferences.horizontalMeasurementUnits});			}		}			}	var myResult = myDialog.show();	if(myResult == true){		var myRowGutter = myRowGutterField.editValue + "pt";		myDialog.destroy();		return myRowGutter;	}	else{		myDialog.destroy();	}}//use documents units for heightfunction documentUnits () {switch (app.documents[0].viewPreferences.horizontalMeasurementUnits){ case 2051106676: return 'ag'; case 2053336435: return 'cm'; case 2053335395: return 'c'; case 2053729891: return 'in'; case 2053729892: return 'in'; case 2053991795: return 'mm'; case 2054187363: return 'p'; case 2054188905: return 'pt'; }}//change book backside functionsfunction setWidthHeight(/*PageItem*/o, /*str*/w, /*str*/h, /*bool=false*/useVisibleBounds) {  if( !o.resize ) return;    var CS_INNER = CoordinateSpaces.INNER_COORDINATES,  BB = BoundingBoxLimits[(useVisibleBounds?'OUTER_STROKE':'GEOMETRIC_PATH') + '_BOUNDS'];    var wPt = UnitValue(w).as('pt'),  hPt = UnitValue(h).as('pt');    if( 0 >= wPt || 0 >= hPt ) return;    o.marginPreferences.properties = {        left: 0,        right: 0,        };    o.resize(  [CS_INNER,BB],  AnchorPoint.CENTER_ANCHOR,  ResizeMethods.REPLACING_CURRENT_DIMENSIONS_WITH,  [wPt,hPt,CS_INNER]  );} 